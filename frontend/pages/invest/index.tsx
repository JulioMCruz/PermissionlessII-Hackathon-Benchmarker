import type { NextPage } from "next";
import Head from "next/head";
import styles from "../../styles/Home.module.css";

import * as React from "react";

import { Button } from "../../components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "../../components/ui/card";
import { Input } from "../../components/ui/input";
import { Label } from "../../components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../../components/ui/select";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import { useAccount } from "wagmi";
import { useState, useEffect } from "react";

const assets = [
  {
    label: "ETH",
    value: "eth",
  },
  {
    label: "WETH",
    value: "weth",
  },
  {
    label: "WBTC",
    value: "btc",
  },
];

const frequencies = [
  {
    label: "Daily",
    value: "daily",
  },
  {
    label: "Weekly",
    value: "weekly",
  },
  {
    label: "Monthly",
    value: "monthly",
  },
];

const Invest: NextPage = () => {
  const { isConnected } = useAccount();
  const [isClient, setIsClient] = useState(false);
  const [projectedInvestment, setProjectedInvestment] = useState(0);
  const [selectedAsset, setSelectedAsset] = useState("eth");
  const [duration, setDuration] = useState(0);
  const [frequency, setFrequency] = useState("daily");
  const [amount, setAmount] = useState(0);

  useEffect(() => {
    setIsClient(true);
  }, []);

  useEffect(() => {
    setProjectedInvestment(duration * amount);
  }, [duration, amount]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Benchmarker</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <Card className="w-[350px]">
          <CardHeader>
            <CardTitle>Invest</CardTitle>
            <CardDescription>Select your parameters.</CardDescription>
          </CardHeader>
          <CardContent>
            <form>
              <div className="grid w-full items-center gap-4">
                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="frequency">Frequency</Label>
                  <Select onValueChange={setFrequency}>
                    <SelectTrigger id="frequency">
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent position="popper">
                      {frequencies.map((f, i) => (
                        <SelectItem
                          key={"frequency-option-" + i}
                          value={f.value}
                        >
                          {f.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="duration">Duration</Label>
                  <Input
                    id="duration"
                    type="number"
                    placeholder="Duration of your investment"
                    value={duration}
                    onChange={(e) => setDuration(parseInt(e.target.value))}
                  />
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="buying">Buying</Label>
                  <Select onValueChange={setSelectedAsset}>
                    <SelectTrigger id="buying">
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent position="popper">
                      {assets.map((asset, i) => (
                        <SelectItem key={"asset-" + i} value={asset.value}>
                          {asset.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="dailyInvestment">
                    {frequency.substring(0, 1).toUpperCase() +
                      frequency.substring(1)}{" "}
                    Investment
                  </Label>
                  <Input
                    id="dailyInvestment"
                    type="number"
                    value={amount}
                    onChange={(e) => setAmount(parseInt(e.target.value))}
                  />
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="projectedInvestment">
                    Projected Investment
                  </Label>
                  <Input
                    readOnly
                    value={projectedInvestment}
                    className="bg-secondary/100"
                  />
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="startDate">Start Date</Label>
                  <Input
                    id="startDate"
                    readOnly
                    value={"Today"}
                    className="bg-secondary/100"
                  />
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="endDate">End Date</Label>
                  <Input
                    id="endDate"
                    readOnly
                    value={"9 Oct 2023"}
                    className="bg-secondary/100"
                  />
                </div>
              </div>
            </form>
          </CardContent>
          <CardFooter className="flex justify-end">
            {isClient && !isConnected && <ConnectButton />}
            {isClient && isConnected && <Button>Deploy</Button>}
          </CardFooter>
        </Card>
      </main>
    </div>
  );
};

export default Invest;
