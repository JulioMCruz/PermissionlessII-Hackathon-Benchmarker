
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../../styles/Home.module.css';

import * as React from "react"
 
import { Button } from "../../components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "../../components/ui/card"
import { Input } from "../../components/ui/input"
import { Label } from "../../components/ui/label"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../../components/ui/select"
import { ConnectButton } from '@rainbow-me/rainbowkit';
import { useAccount } from "wagmi";
import { useState, useEffect } from 'react'


const Invest: NextPage = () => {

  const { isConnected } = useAccount();
  const [isClient, setIsClient] = useState(false)
 
  useEffect(() => {
    setIsClient(true)
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Benchmarker</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>

        <Card className="w-[350px]">
          <CardHeader>
            <CardTitle>Invest</CardTitle>
            <CardDescription>Select your parameters.</CardDescription>
          </CardHeader>
          <CardContent>
            <form>
              <div className="grid w-full items-center gap-4">

              <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="frequency">Frequency</Label>
                  <Select>
                    <SelectTrigger id="frequency">
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent position="popper">
                      <SelectItem value="daily">Daily</SelectItem>
                      <SelectItem value="weekly">Weekly</SelectItem>
                      <SelectItem value="monthly">Monthly</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="duration">Duration</Label>
                  <Input id="duration" placeholder="Duration of your investment" />
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="buying">Buying</Label>
                  <Select>
                    <SelectTrigger id="buying">
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent position="popper">
                      <SelectItem value="next">ETH</SelectItem>
                      <SelectItem value="sveltekit">USDC</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="dailyInvestment">Daily Investment</Label>
                  <Input id="dailyInvestment" />
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="projectedInvestment">Projected Investment</Label>
                  <Input id="projectedInvestment" readOnly  value={"100"} className="bg-secondary/100"/>
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="startDate">Start Date</Label>
                  <Input id="startDate" readOnly  value={"Today"} className="bg-secondary/100"/>
                </div>

                <div className="flex flex-col space-y-1.5">
                  <Label htmlFor="endDate">End Date</Label>
                  <Input id="endDate" readOnly  value={"9 Oct 2023"} className="bg-secondary/100"/>
                </div>

              </div>
            </form>
          </CardContent>
          <CardFooter className="flex justify-end">

            {(isClient && !isConnected) && (
              <ConnectButton  />
            )}
            {(isClient && isConnected) && (
              <Button>Deploy</Button>
            )}

          </CardFooter>
        </Card>

      </main>

    </div>
  );
};

export default Invest;
